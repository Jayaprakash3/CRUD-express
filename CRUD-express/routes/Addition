var express = require('express');
var router = express.Router();

/**
 * @swagger
 * /location/getLocation:
 *   get:
 *     summary: Get all location
 *     tags:
 *       - Locations
 *     description:  Get all Location Details
 *     produces:
 *       - application/json
 *     responses:
 *       200:
 *         description: Successfully received all the Location Details.
 */


router.get('/getLocation', async (req, res, next) => {
    var response = await locationModel.find();
    res.send(response);
})

/**
 * @swagger
 * /location/addLocation:
 *   post:
 *     summary: Enter the new locations
 *     tags:
 *       - Locations
 *     description: Location details
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: Location Details
 *         description: Employee location details
 *         in: body
 *         default : '{"city":"Coimbatore","state":"TamilNadu","country":"India"}'
 *         schema:
 *           $ref: '#/definitions/Locations'
 *     responses:
 *       200:
 *         description: Successfully created
 */

/**
 * @swagger
 * definitions:
 *   Locations:
 *     properties:
 *       city:
 *         type: string
 *       state:
 *         type: string
 *       country:
 *         type: string    
 */


router.post('/addLocation', async function (req, res, next) {
    var value = req.body;
    console.log(value);
    let newLocation = new locationModel({
        city: value.city,
        state: value.state,
        country: value.country
    });
    // newLocation.save(newLocation);
    newLocation.save().then((newLocation) => {
        logger1.info(value.city + " " + "location added..");

        res.send("Location Added");
    }).catch((err) => {
        res.send("not added in db");
    })
});

/**
 * @swagger
 * /location/updateLocation:
 *   put:
 *     summary: Edit the location details
 *     tags:
 *       - Locations
 *     description: Update location details
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: Location Details
 *         description: Update location details
 *         in: body
 *         default : '{"city":"Coimbatore","state":"TamilNadu","country":"India"}'
 *         schema:
 *           $ref: '#/definitions/UpdateLocations'
 *     responses:
 *       200:
 *         description: Successfully created
 */

/**
 * @swagger
 * definitions:
 *   UpdateLocations:
 *     properties:
 *       city:
 *         type: string
 *       state:
 *         type: string
 *       country:
 *         type: string    
 */


router.put('/updateLocation', async (req, res, next) => {
    var stateName = req.body.state;
    var countryName = req.body.country;
    var response = await locationModel.updateOne({ city: req.body.city }, { state: stateName, country: countryName });
    res.send(await locationModel.find());
})

/**
 * @swagger
 * /location/deleteLocation:
 *   delete:
 *     summary: Delete Location
 *     tags:
 *       - Locations
 *     description: Delete Location 
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: Delete location
 *         description: Delete location details
 *         in: body
 *         default : '{"city":"Coimbatore","state":"TamilNadu","country":"India"}'
 *         schema:
 *           $ref: '#/definitions/DeleteLocations'
 *     responses:
 *       200:
 *         description: Successfully created
 */

/**
 * @swagger
 * definitions:
 *   DeleteLocations:
 *     properties:
 *       city:
 *         type: string
 *       state:
 *         type: string
 *       country:
 *         type: string    
 */


router.delete('/user', async (req, res, next) => {
    var condition = req.body.city;
    var response = await locationModel.deleteOne({ city: condition });
    res.send("city Deleted")
})


module.exports = router;
